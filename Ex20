# https://unicode.org/emoji/charts/emoji-list.html

# import emoji
#
# print(emoji.emojize('Python is :thumbs_up: '))

print('\U0001F44D')
print('\U0001F63B')

str_de = 'This is example'
byte = str_de.encode()
print(byte)
str_en = byte.decode()
print(str_en)

byte_data = b'\xf0\x9f\x8d\x95'
str_ = byte_data.decode('utf8')
print(str_)

import locale

print(locale.getpreferredencoding(False))

result_1 = 'x\u00b2'
result_2 = 'x\N{SUPERSCRIPT TWO}'
result_1b = result_1.encode('utf8')
print(result_1)
print(result_2)
print(result_1b)
# print(help(UNICODE))
result_1bb = result_1.encode('ascii', errors='ignore')
print(result_1bb)
"""
----------------------------------------------------------------------
"""
# Упражнение 20.7.1
# https://www.charset.org/utf-8/13
# https://ru.wikipedia.org/wiki/ASCII
# https://home.unicode.org/

sym = '\u30c4'
sym_t = '\N{Katakana Letter Du}'
sym_g = ''

print('20.7.1:', sym)
print('20.7.1:', sym_t)


# ascii_symbol = sym.encode('ascii', errors='ignore')
# print('20.7.1:', ascii_symbol)

# Упражнение 20.7.2
# https://ru.wikipedia.org/wiki/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4
# https://www.utf8-chartable.de/unicode-utf8-table.pl?names=2&amp;utf8=string-literal
def utf8_ascii(utf8_ascii):
    new = utf8_ascii[::-1]
    print('20.7.2:', utf8_ascii)
    print('20.7.2:', new)


utf8_ascii('x\N{SUPERSCRIPT TWO}')  # '\U000000A9'

# Упражнение 20.7.3
# with open('name.txt', 'r') as fin:
#     read = fin.read()
#     reverse_read = read[::-1]
#     print(read)
#     print(reverse_read)
#     print('\U0000041C')
from name import name

print(name)
rev_name = name[::-1]
print(rev_name)

# Упражнение 20.7.4
# https://unicode-table.com/ru/sets/quotation-marks/
b = '\U0000275E'
a = '\U0000275D'
base_string = 'Python comes with "batteries included"'
print(base_string)
# new_b_s = "Python comes with \U0000275Dbatteries included\U0000275E"
count = 0
for i in range(0, 2):
    index = base_string.find('"')
    # print(index)
    if count == 0:
        temp = list(base_string)
        temp[index] = a
        base_string = "".join(temp)
        count += 1
    elif count == 1:
        temp = list(base_string)
        temp[index] = b
        base_string = "".join(temp)
        count += 1
print(base_string)

# Упражнение 20.7.5
emoji = [':)', ';)', ':P', ':|']
new_emoji = ['\U0001F600', '\U0001F609', '\U0001F60B', '\U0001F610']


def old_to_new(old, new):
    for i in range(0, 4):
        emoji[i] = new_emoji[i]
        print(emoji)
    print(new_emoji)

# old_to_new(emoji, new_emoji)
========================================================================

# Классы
import time
import random


class CorrectChair:
    """ A Chair on a chairlift """
    max_occupants = 4

    def __init__(self, id):
        self.id = id
        self.count = 0

    def load(self, number):
        new_val = self._check(self.count + number)
        self.count = new_val

    def unload(self, number):
        new_val = self._check(self.count - number)
        self.count = new_val

    def _check(self, number):
        if number < 0 or number > self.max_occupants:
            raise ValueError('invalid count: {}'.format(number))
        return number


NUM_CHAIRS = 100

chairs = []
for num in range(1, NUM_CHAIRS + 1):
    chairs.append(CorrectChair(num))


def avg(chairs):
    total = 0
    for chair in chairs:
        total += chair.count
    return total / len(chairs)


in_use = []
transported = 0
while True:
    loading = chairs.pop(0)
    in_use.append(loading)
    in_use[-1].load(random.randint(0, CorrectChair.max_occupants))

    if len(in_use) > NUM_CHAIRS / 2:
        unloading = in_use.pop(0)
        transported += unloading.count
        unloading.unload(unloading.count)
        chairs.append(unloading)
        print(loading.count)
        print('Loading Chair {} Count:{} Avg{:.2} Total:{}'.format(loading.id, loading.count, avg(in_use), transported))
        time.sleep(.25)
-----------------------------------------------------------------

# 1
class Client:
    """ Client """
    account = 0
    def __init__(self, id):
        self.id = id
        self.sum = 0

    def add_money(self, sum):
        new_sum = self._check(self.account + sum)
        self.account = new_sum

    def withdraw_money(self, sum):
        new_sum = self._check(self.account - sum)
        self.account = new_sum

    def _check(self, account):
        if account < 0:
            print(f'На вашем счёте {account} средств.')
        return account

new_client = Client(0)
print(new_client.account)
new_client.add_money(100)
print(new_client.account)
new_client.withdraw_money(90)
print(new_client.account)
new_client.withdraw_money(20)

------------------------------------------------

# 2
class Mario:
    """ Персонаж игры Марио """
    current_speed = 10

    def __init__(self, name):
        self.name = name

    def run(self, speed):
        self.current_speed += speed

    def jump(self, high):
        self.current_speed -= high


pers = Mario('Chip')
# pers.run(15)
# pers.jump(5)
print(pers.name)
print(pers.current_speed)
print(pers.jump)

---------------------------------------------------

# 3

class Twitter:
    """ Twitter социальная сеть """
    twit = 0
    twit_count = 0

    def __init__(self, nickname):
        self.nickname = nickname

    def add_twit(self, note):
        note = int(note)
        new_twit = self._check(self.twit + note)
        self.twit = new_twit
        self.twit_count += 1

    def del_twit(self, note):
        note = int(note)
        new_twit = self._check(self.twit - note)
        self.twit = new_twit
        self.twit_count -= 1

    def _check(self, twit_count):
        if twit_count < 1:
            print('Опубликованных твитов нет')
        return twit_count


my_twit = Twitter('My nick')
my_twit.add_twit(1)
# my_twit.del_twit(1)

print(my_twit.nickname)
print(my_twit.__dict__)

print(my_twit.twit)

--------------------------------------------------

# 4

class Toster:
    """ Toster """

    def __init__(self, title):
        self.title = title

    def materials(self, materials):
        self.materials = materials

    def mode(self, mode):
        self.mode = mode


tost = Toster('BUD')
tost.materials('steel')
tost.mode('heating')

print(tost.__dict__)



