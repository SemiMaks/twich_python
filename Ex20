# https://unicode.org/emoji/charts/emoji-list.html

# import emoji
#
# print(emoji.emojize('Python is :thumbs_up: '))

print('\U0001F44D')
print('\U0001F63B')

str_de = 'This is example'
byte = str_de.encode()
print(byte)
str_en = byte.decode()
print(str_en)

byte_data = b'\xf0\x9f\x8d\x95'
str_ = byte_data.decode('utf8')
print(str_)

import locale

print(locale.getpreferredencoding(False))

result_1 = 'x\u00b2'
result_2 = 'x\N{SUPERSCRIPT TWO}'
result_1b = result_1.encode('utf8')
print(result_1)
print(result_2)
print(result_1b)
# print(help(UNICODE))
result_1bb = result_1.encode('ascii', errors='ignore')
print(result_1bb)
"""
----------------------------------------------------------------------
"""
# Упражнение 20.7.1
# https://www.charset.org/utf-8/13
# https://ru.wikipedia.org/wiki/ASCII
# https://home.unicode.org/

sym = '\u30c4'
sym_t = '\N{Katakana Letter Du}'
sym_g = ''

print('20.7.1:', sym)
print('20.7.1:', sym_t)


# ascii_symbol = sym.encode('ascii', errors='ignore')
# print('20.7.1:', ascii_symbol)

# Упражнение 20.7.2
# https://ru.wikipedia.org/wiki/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4
# https://www.utf8-chartable.de/unicode-utf8-table.pl?names=2&amp;utf8=string-literal
def utf8_ascii(utf8_ascii):
    new = utf8_ascii[::-1]
    print('20.7.2:', utf8_ascii)
    print('20.7.2:', new)


utf8_ascii('x\N{SUPERSCRIPT TWO}')  # '\U000000A9'

# Упражнение 20.7.3
# with open('name.txt', 'r') as fin:
#     read = fin.read()
#     reverse_read = read[::-1]
#     print(read)
#     print(reverse_read)
#     print('\U0000041C')
from name import name

print(name)
rev_name = name[::-1]
print(rev_name)

# Упражнение 20.7.4
# https://unicode-table.com/ru/sets/quotation-marks/
b = '\U0000275E'
a = '\U0000275D'
base_string = 'Python comes with "batteries included"'
print(base_string)
# new_b_s = "Python comes with \U0000275Dbatteries included\U0000275E"
count = 0
for i in range(0, 2):
    index = base_string.find('"')
    # print(index)
    if count == 0:
        temp = list(base_string)
        temp[index] = a
        base_string = "".join(temp)
        count += 1
    elif count == 1:
        temp = list(base_string)
        temp[index] = b
        base_string = "".join(temp)
        count += 1
print(base_string)

# Упражнение 20.7.5
emoji = [':)', ';)', ':P', ':|']
new_emoji = ['\U0001F600', '\U0001F609', '\U0001F60B', '\U0001F610']


def old_to_new(old, new):
    for i in range(0, 4):
        emoji[i] = new_emoji[i]
        print(emoji)
    print(new_emoji)

# old_to_new(emoji, new_emoji)
